name: CI - Testes (Ubuntu + Windows)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    name: Test on ${{ matrix.os }} / Python ${{ matrix['python-version'] }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.12']
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix['python-version'] }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix['python-version'] }}
          cache: 'pip'
          
      - name: Check for requirements file
        id: check_req
        shell: bash
        run: |
          # Verificando se o arquivo de requisitos existe no novo caminho (codon/)
          if [ -f "codon/requirements.txt" ]; then
            echo "requirements_exist=true" >> $GITHUB_OUTPUT
          else
            echo "requirements_exist=false" >> $GITHUB_OUTPUT
          fi

      - name: Cache pip wheel & downloads (extra)
        if: steps.check_req.outputs.requirements_exist == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/codon/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies (with retry)
        shell: bash
        run: |
          set -euxo pipefail
          # atualiza pip, mas evita checagens interativas que atrasam
          python -m pip install --upgrade pip --disable-pip-version-check || true
          # tenta instalar requirements com 2 tentativas (retry simples)
          if [ -f "codon/requirements.txt" ]; then
            for i in 1 2; do
              pip install --prefer-binary --no-input -r codon/requirements.txt && break || sleep 5
            done
          fi

      - name: Run tests (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          set -euxo pipefail
          chmod +x codon/scripts/run_all_tests.sh || true
          ./codon/scripts/run_all_tests.sh || {
            echo "run_all_tests.sh failed â€” fallback to pytest"
            pytest codon/test -q || ( echo "pytest also failed"; false )
          }

      - name: Run tests (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip --disable-pip-version-check
          if (Test-Path "codon/requirements.txt") {
            pip install --prefer-binary --no-input -r codon/requirements.txt
          }
          if (Test-Path "codon/scripts/run_all_tests.ps1") {
            try {
              .\codon\scripts\run_all_tests.ps1
            } catch {
              Write-Host "run_all_tests.ps1 falhou. Fallback para pytest."
              pytest codon/test -q
              if ($LASTEXITCODE -ne 0) { throw "pytest falhou" }
            }
          } else {
            pytest codon/test -q
          }

      - name: Upload pytest JUnit (optional)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: pytest-report
          path: report.xml
